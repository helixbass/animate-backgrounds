// Generated by CoffeeScript 1.12.5
(function() {
  var Color, Tween, _int, extend, map, registerAnimationHandler, type;

  extend = $.extend, Tween = $.Tween, type = $.type, Color = $.Color;

  map = function(arr, clb) {
    var elem, i, j, len, results;
    results = [];
    for (i = j = 0, len = arr.length; j < len; i = ++j) {
      elem = arr[i];
      results.push(clb(elem, i));
    }
    return results;
  };

  registerAnimationHandler = function(arg) {
    var css_val_from_initialized_tween, hook_name, init, init_tween_end, parse, parsedTween, prop_name;
    prop_name = arg.prop_name, hook_name = arg.hook_name, parse = arg.parse, init_tween_end = arg.init_tween_end, css_val_from_initialized_tween = arg.css_val_from_initialized_tween;
    parsedTween = function(tween) {
      return parse($(tween.elem).css(prop_name));
    };
    init = function(tween) {
      tween.start = parsedTween(tween);
      tween.end = init_tween_end({
        tween: tween,
        parse: parse
      });
      tween.set = true;
      return console.log({
        tween: tween
      });
    };
    return Tween.propHooks[hook_name != null ? hook_name : prop_name] = {
      get: parsedTween,
      set: function(tween) {
        if (!tween.set) {
          init(tween);
        }
        return $(tween.elem).css(prop_name, css_val_from_initialized_tween(tween));
      }
    };
  };

  registerAnimationHandler({
    prop_name: 'backgroundPosition',
    parse: function(val) {
      var _match, bg, dim, dims, j, len, ref, results;
      ref = (val || '').split(/\s*,\s*/);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        bg = ref[j];
        dims = (function() {
          var ref1, unstandardizedDims;
          unstandardizedDims = bg.split(/\s+/);
          if (unstandardizedDims.length === 1) {
            unstandardizedDims = (ref1 = unstandardizedDims[0]) === 'top' || ref1 === 'bottom' ? ['50%', unstandardizedDims[0]] : [unstandardizedDims[0], '50%'];
          }
          return map(unstandardizedDims, function(dim) {
            var presets;
            presets = {
              center: '50%',
              left: '0%',
              right: '100%',
              top: '0%',
              bottom: '100%'
            };
            return "" + (presets[dim] || dim);
          });
        })();
        results.push((function() {
          var k, len1, results1;
          results1 = [];
          for (k = 0, len1 = dims.length; k < len1; k++) {
            dim = dims[k];
            _match = dim.match(/^([+-]=)?([+-]?\d+(?:\.\d*)?)(.*)$/);
            results1.push({
              rel_op: _match[1],
              amount: parseFloat(_match[2]),
              unit: _match[3] || 'px'
            });
          }
          return results1;
        })());
      }
      return results;
    },
    init_tween_end: function(arg) {
      var bgIndex, end, endBg, j, len, parse, ref, results, start, tween;
      tween = arg.tween, parse = arg.parse;
      start = tween.start, end = tween.end;
      ref = parse(end);
      results = [];
      for (bgIndex = j = 0, len = ref.length; j < len; bgIndex = ++j) {
        endBg = ref[bgIndex];
        results.push(map(endBg, function(val, i) {
          var amount, rel_op;
          rel_op = val.rel_op, amount = val.amount;
          if (!rel_op) {
            return val;
          }
          val.amount = start[bgIndex][i].amount + amount * (rel_op === '-=' ? -1 : 1);
          return val;
        }));
      }
      return results;
    },
    css_val_from_initialized_tween: function(tween) {
      var _adjusted, _span, bgEnd, bgIndex, bgStart, dim, end, pos, start;
      pos = tween.pos, start = tween.start, end = tween.end;
      return ((function() {
        var j, len, results;
        results = [];
        for (bgIndex = j = 0, len = start.length; j < len; bgIndex = ++j) {
          bgStart = start[bgIndex];
          bgEnd = end[bgIndex];
          _span = function(dim) {
            return bgEnd[dim].amount - bgStart[dim].amount;
          };
          _adjusted = function(dim) {
            return bgStart[dim].amount + pos * _span(dim);
          };
          results.push(((function() {
            var k, len1, ref, results1;
            ref = [0, 1];
            results1 = [];
            for (k = 0, len1 = ref.length; k < len1; k++) {
              dim = ref[k];
              results1.push("" + (_adjusted(dim)) + bgStart[dim].unit);
            }
            return results1;
          })()).join(' '));
        }
        return results;
      })()).join(', ');
    }
  });

  registerAnimationHandler({
    prop_name: 'backgroundSize',
    parse: function(val) {
      var _match, bg, dim, dims, j, len, ref, results;
      ref = (val || '').split(/\s*,\s*/);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        bg = ref[j];
        dims = (function() {
          var suppliedDims;
          if (bg === 'contain' || bg === 'cover') {
            return [bg, ''];
          }
          suppliedDims = bg.split(/\s+/);
          if (suppliedDims.length !== 1) {
            return suppliedDims;
          }
          return [suppliedDims[0], 'auto'];
        })();
        results.push((function() {
          var k, len1, results1;
          results1 = [];
          for (k = 0, len1 = dims.length; k < len1; k++) {
            dim = dims[k];
            _match = dim.match(/^(?:(?:([+-]=)?([+-]?\d+(?:\.\d*)?)(.*))|auto)$/);
            if (!(_match != null ? _match[2] : void 0)) {
              results1.push(dim);
            } else {
              results1.push({
                rel_op: _match[1],
                amount: parseFloat(_match[2]),
                unit: _match[3] || 'px'
              });
            }
          }
          return results1;
        })());
      }
      return results;
    },
    init_tween_end: function(arg) {
      var bgIndex, end, endBg, j, len, parse, ref, results, start, tween;
      tween = arg.tween, parse = arg.parse;
      start = tween.start, end = tween.end;
      ref = parse(end);
      results = [];
      for (bgIndex = j = 0, len = ref.length; j < len; bgIndex = ++j) {
        endBg = ref[bgIndex];
        results.push(map(endBg, function(val, i) {
          var amount, rel_op;
          if (!(val != null ? val.unit : void 0)) {
            return val;
          }
          rel_op = val.rel_op, amount = val.amount;
          if (!rel_op) {
            return val;
          }
          val.amount = start[bgIndex][i].amount + amount * (rel_op === '-=' ? -1 : 1);
          return val;
        }));
      }
      return results;
    },
    css_val_from_initialized_tween: function(tween) {
      var _adjusted, _span, bgEnd, bgIndex, bgStart, bgStartDim, dim, end, pos, start;
      pos = tween.pos, start = tween.start, end = tween.end;
      return ((function() {
        var j, len, results;
        results = [];
        for (bgIndex = j = 0, len = start.length; j < len; bgIndex = ++j) {
          bgStart = start[bgIndex];
          bgEnd = end[bgIndex];
          _span = function(dim) {
            return bgEnd[dim].amount - bgStart[dim].amount;
          };
          _adjusted = function(dim) {
            return bgStart[dim].amount + pos * _span(dim);
          };
          results.push(((function() {
            var k, len1, ref, results1;
            ref = [0, 1];
            results1 = [];
            for (k = 0, len1 = ref.length; k < len1; k++) {
              dim = ref[k];
              bgStartDim = bgStart[dim];
              if (bgStartDim != null ? bgStartDim.unit : void 0) {
                results1.push("" + (_adjusted(dim)) + bgStartDim.unit);
              } else {
                results1.push(bgStartDim);
              }
            }
            return results1;
          })()).join(' ').trim());
        }
        return results;
      })()).join(', ');
    }
  });

  _int = function(str) {
    return parseInt(str, 10);
  };

  registerAnimationHandler({
    hook_name: 'linearGradient',
    prop_name: 'backgroundImage',
    init_tween_end: function(arg) {
      var end, parse, start, tween;
      tween = arg.tween, parse = arg.parse;
      start = tween.start, end = tween.end;
      return parse(end);
    },
    parse: function(val) {
      var _top_level_args, image, j, len, ref, results;
      _top_level_args = function(val) {
        return val.match(/[^\(,]*\((?:[^\(\)]+|[^\(\)]+\([^\)]+\)[^\(\)]*)+\)[^,]*|[^,]+/g);
      };
      ref = _top_level_args(val);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        image = ref[j];
        results.push((function() {
          var all, angle, color, match, position, stop, stops, unit;
          match = /^\s*linear-gradient\(\s*(-?\d+)deg\s*,\s*((?:(?:rgb\([^)]*\))|[^)]+)*)\)\s*$/.exec(image);
          if (!match) {
            return image;
          }
          all = match[0], angle = match[1], stops = match[2];
          return {
            angle: _int(angle),
            stops: (function() {
              var k, len1, ref1, results1;
              ref1 = _top_level_args(stops);
              results1 = [];
              for (k = 0, len1 = ref1.length; k < len1; k++) {
                stop = ref1[k];
                match = /^\s*((?:rgb\([^)]*\))|(?:\#[0-9A-Fa-f]+)|\w+)(?:\s+([0-9.]+)(%|\w+))?/.exec(stop);
                all = match[0], color = match[1], position = match[2], unit = match[3];
                results1.push({
                  color: Color(color),
                  position: _int(position != null ? position : 0),
                  unit: unit != null ? unit : 'px'
                });
              }
              return results1;
            })()
          };
        })());
      }
      return results;
    },
    css_val_from_initialized_tween: function(tween) {
      var end, image, image_index, pos, start;
      pos = tween.pos, start = tween.start, end = tween.end;
      return ((function() {
        var j, len, results;
        results = [];
        for (image_index = j = 0, len = start.length; j < len; image_index = ++j) {
          image = start[image_index];
          results.push((function() {
            var _scaled, adjusted_stops, color, end_image, i, position, unit;
            if ('string' === type(image)) {
              return image;
            }
            end_image = end[image_index];
            _scaled = function(_prop) {
              var start_val;
              start_val = _prop(image);
              return start_val + pos * (_prop(end_image) - start_val);
            };
            adjusted_stops = (function() {
              var k, len1, ref, ref1, results1;
              ref = image.stops;
              results1 = [];
              for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
                ref1 = ref[i], color = ref1.color, unit = ref1.unit;
                results1.push({
                  color: color.transition(end[image_index].stops[i].color, pos),
                  position: _scaled(function(arg) {
                    var stops;
                    stops = arg.stops;
                    return stops[i].position;
                  }),
                  unit: unit
                });
              }
              return results1;
            })();
            return "linear-gradient(" + (_scaled(function(arg) {
              var angle;
              angle = arg.angle;
              return angle;
            })) + "deg, " + (((function() {
              var k, len1, ref, results1;
              results1 = [];
              for (k = 0, len1 = adjusted_stops.length; k < len1; k++) {
                ref = adjusted_stops[k], color = ref.color, position = ref.position, unit = ref.unit;
                results1.push(color + " " + position + unit);
              }
              return results1;
            })()).join(', ')) + ")";
          })());
        }
        return results;
      })()).join(', ');
    }
  });

}).call(this);
