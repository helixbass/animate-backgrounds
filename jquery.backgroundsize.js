// Generated by CoffeeScript 1.7.1
(function() {
  var Tween, extend, isArray, map, registerAnimationHandler;

  extend = $.extend, Tween = $.Tween, isArray = $.isArray;

  map = function(arr, clb) {
    var elem, i, _i, _len, _results;
    _results = [];
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      elem = arr[i];
      _results.push(clb(elem, i));
    }
    return _results;
  };

  registerAnimationHandler = function(_arg) {
    var cssValFromInitializedTween, init, initTweenEnd, parse, parsedTween, propName;
    propName = _arg.propName, parse = _arg.parse, initTweenEnd = _arg.initTweenEnd, cssValFromInitializedTween = _arg.cssValFromInitializedTween;
    parsedTween = function(tween) {
      return parse($(tween.elem).css(propName));
    };
    init = function(tween) {
      tween.start = parsedTween(tween);
      tween.end = initTweenEnd({
        tween: tween,
        parse: parse
      });
      return tween.set = true;
    };
    return Tween.propHooks[propName] = {
      get: parsedTween,
      set: function(tween) {
        if (!tween.set) {
          init(tween);
        }
        return $(tween.elem).css(propName, cssValFromInitializedTween(tween));
      }
    };
  };

  registerAnimationHandler({
    propName: 'backgroundPosition',
    parse: function(val) {
      var bg, dim, dims, _i, _len, _match, _ref, _results;
      _ref = (val || '').split(/\s*,\s*/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bg = _ref[_i];
        dims = (function() {
          var unstandardizedDims, _ref1;
          unstandardizedDims = bg.split(/\s+/);
          if (unstandardizedDims.length === 1) {
            unstandardizedDims = (_ref1 = unstandardizedDims[0]) === 'top' || _ref1 === 'bottom' ? ['50%', unstandardizedDims[0]] : [unstandardizedDims[0], '50%'];
          }
          return map(unstandardizedDims, function(dim) {
            var presets;
            presets = {
              center: '50%',
              left: '0%',
              right: '100%',
              top: '0%',
              bottom: '100%'
            };
            return "" + (presets[dim] || dim);
          });
        })();
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = dims.length; _j < _len1; _j++) {
            dim = dims[_j];
            _match = dim.match(/^([+-]=)?([+-]?\d+(?:\.\d*)?)(.*)$/);
            _results1.push([_match[1], parseFloat(_match[2]), _match[3] || 'px']);
          }
          return _results1;
        })());
      }
      return _results;
    },
    initTweenEnd: function(_arg) {
      var bgIndex, end, endBg, parse, start, tween, _i, _len, _ref, _results;
      tween = _arg.tween, parse = _arg.parse;
      start = tween.start, end = tween.end;
      _ref = parse(end);
      _results = [];
      for (bgIndex = _i = 0, _len = _ref.length; _i < _len; bgIndex = ++_i) {
        endBg = _ref[bgIndex];
        _results.push(map(endBg, function(val, i) {
          var amount, rel_op;
          rel_op = val[0], amount = val[1];
          if (!rel_op) {
            return val;
          }
          val[1] = start[bgIndex][i][1] + amount * (rel_op === '-=' ? -1 : 1);
          return val;
        }));
      }
      return _results;
    },
    cssValFromInitializedTween: function(tween) {
      var bg, bgEnd, bgIndex, bgStart, dim, end, pos, start, _adjusted, _span;
      pos = tween.pos, start = tween.start, end = tween.end;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (bgIndex = _i = 0, _len = start.length; _i < _len; bgIndex = ++_i) {
          bg = start[bgIndex];
          bgStart = start[bgIndex];
          bgEnd = end[bgIndex];
          _span = function(dim) {
            return bgEnd[dim][1] - bgStart[dim][1];
          };
          _adjusted = function(dim) {
            return bgStart[dim][1] + pos * _span(dim);
          };
          _results.push(((function() {
            var _j, _len1, _ref, _results1;
            _ref = [0, 1];
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              dim = _ref[_j];
              _results1.push("" + (_adjusted(dim)) + bgStart[dim][2]);
            }
            return _results1;
          })()).join(' '));
        }
        return _results;
      })()).join(', ');
    }
  });

  registerAnimationHandler({
    propName: 'backgroundSize',
    parse: function(val) {
      var bg, dim, dims, _i, _len, _match, _ref, _results;
      _ref = (val || '').split(/\s*,\s*/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bg = _ref[_i];
        dims = (function() {
          var suppliedDims;
          if (bg === 'contain' || bg === 'cover') {
            return [bg, ''];
          }
          suppliedDims = bg.split(/\s+/);
          if (suppliedDims.length === 1) {
            return [suppliedDims[0], 'auto'];
          } else {
            return suppliedDims;
          }
        })();
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = dims.length; _j < _len1; _j++) {
            dim = dims[_j];
            _match = dim.match(/^(?:(?:([+-]=)?([+-]?\d+(?:\.\d*)?)(.*))|auto)$/);
            if (!(_match != null ? _match[2] : void 0)) {
              _results1.push(dim);
            } else {
              _results1.push([_match[1], parseFloat(_match[2]), _match[3] || 'px']);
            }
          }
          return _results1;
        })());
      }
      return _results;
    },
    initTweenEnd: function(_arg) {
      var bgIndex, end, endBg, parse, start, tween, _i, _len, _ref, _results;
      tween = _arg.tween, parse = _arg.parse;
      start = tween.start, end = tween.end;
      _ref = parse(end);
      _results = [];
      for (bgIndex = _i = 0, _len = _ref.length; _i < _len; bgIndex = ++_i) {
        endBg = _ref[bgIndex];
        _results.push(map(endBg, function(val, i) {
          var amount, rel_op;
          if (!isArray(val)) {
            return val;
          }
          rel_op = val[0], amount = val[1];
          if (!rel_op) {
            return val;
          }
          val[1] = start[bgIndex][i][1] + amount * (rel_op === '-=' ? -1 : 1);
          return val;
        }));
      }
      return _results;
    },
    cssValFromInitializedTween: function(tween) {
      var bg, bgEnd, bgIndex, bgStart, bgStartDim, dim, end, pos, start, _adjusted, _span;
      pos = tween.pos, start = tween.start, end = tween.end;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (bgIndex = _i = 0, _len = start.length; _i < _len; bgIndex = ++_i) {
          bg = start[bgIndex];
          bgStart = start[bgIndex];
          bgEnd = end[bgIndex];
          _span = function(dim) {
            return bgEnd[dim][1] - bgStart[dim][1];
          };
          _adjusted = function(dim) {
            return bgStart[dim][1] + pos * _span(dim);
          };
          _results.push(((function() {
            var _j, _len1, _ref, _results1;
            _ref = [0, 1];
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              dim = _ref[_j];
              bgStartDim = bgStart[dim];
              if (isArray(bgStartDim)) {
                _results1.push("" + (_adjusted(dim)) + bgStartDim[2]);
              } else {
                _results1.push(bgStartDim);
              }
            }
            return _results1;
          })()).join(' ').trim());
        }
        return _results;
      })()).join(', ');
    }
  });

}).call(this);
